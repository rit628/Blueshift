diff --git a/src/client/libDevice/DeviceCore.hpp b/src/client/libDevice/DeviceCore.hpp
index aa72525..55d0df5 100644
--- a/src/client/libDevice/DeviceCore.hpp
+++ b/src/client/libDevice/DeviceCore.hpp
@@ -14,6 +14,7 @@
 #include <unistd.h> 
 #include <vector>
 #include <pigpio.h>
+#include <thread>
 
 #define VOLATILITY_LIST_SIZE 10
 
@@ -418,9 +419,9 @@ class DeviceInterruptor{
         void IGpioWatcher(int portNum, std::atomic<bool>* interruptHandle)
         {
             while (true) {
-                interruptHandle->wait(true);
+                interruptHandle->wait(false);
                 this->sendMessage();
-                interruptHandle->store(false);
+		std::this_thread::sleep_for(std::chrono::milliseconds(100));
             }
         }
         
diff --git a/src/client/libDevice/Devices.cpp b/src/client/libDevice/Devices.cpp
index aa00276..2568adc 100644
--- a/src/client/libDevice/Devices.cpp
+++ b/src/client/libDevice/Devices.cpp
@@ -1,6 +1,7 @@
 #include "Devices.hpp"
 #include "libDM/DynamicMessage.hpp"
 //#include <pigpio.h>
+#include <iostream>
 
 using namespace Device;
 
@@ -136,7 +137,9 @@ void BUTTON::handleInterrupt(int gpio, int level, uint32_t tick, void* self) {
         button->states.pressed = false;
     }
     button->signaler.store(true);
+    std::cout << "interrupted!" << std::endl;
     button->signaler.notify_all();
+    button->signaler.store(false);
 }
 
 void BUTTON::set_ports(std::unordered_map<std::string, std::string> &src)
@@ -149,6 +152,7 @@ void BUTTON::set_ports(std::unordered_map<std::string, std::string> &src)
     }
     gpioSetMode(this->PIN, PI_INPUT);
     gpioSetPullUpDown(this->PIN, PI_PUD_UP);
+    this->signaler.store(false);
     gpioSetAlertFuncEx(this->PIN, handleInterrupt, this);
     this->addGPIOIWatch(this->PIN, &this->signaler);
 }
@@ -367,4 +371,4 @@ std::shared_ptr<AbstractDevice> getDevice(DEVTYPE dtype, std::unordered_map<std:
             throw std::invalid_argument("Unknown dtype accessed!"); 
         }
     }; 
-}; 
\ No newline at end of file
+}; 
